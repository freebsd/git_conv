#!/bin/sh
#
# 1. Repository creation and setup
#
# svnsync mirror with cloned UUID
# - svnadmin create freebsd-base.svn
# - svnadmin create freebsd-doc.svn
# - svnadmin create freebsd-ports.svn
# - echo '#!/bin/sh' > freebsd-base.svn/hooks/pre-revprop-change
# - echo '#!/bin/sh' > freebsd-doc.svn/hooks/pre-revprop-change
# - echo '#!/bin/sh' > freebsd-ports.svn/hooks/pre-revprop-change
# - chmod +x freebsd-base.svn/hooks/pre-revprop-change freebsd-doc.svn/hooks/pre-revprop-change freebsd-ports.svn/hooks/pre-revprop-change
#   - svnadmin setuuid freebsd-base.svn ccf9f872-aa2e-dd11-9fc8-001c23d0bc1f
#   - svnadmin setuuid freebsd-doc.svn c2e8774f-c49f-e111-b436-862b2bbc8956
#   - svnadmin setuuid freebsd-ports.svn 35697150-7ecd-e111-bb59-0022644237b5
# - svnsync init file://$PWD/freebsd-base.svn svn://svn.freebsd.org/base
# - svnsync init file://$PWD/freebsd-doc.svn svn://svn.freebsd.org/doc
# - svnsync init file://$PWD/freebsd-ports.svn svn://svn.freebsd.org/ports
# !!! ACHTUNG !!!
# svnsync doesn't work atomically and can mess up metadata for commits. This
# has happened already with the mirror as used by the official svn2git
# conversion as exported in github. This is even worse than you can imagine.
#
# DO NOT USE THIS NAIVE SVN SYNC FROM THE LIVE REPO, see svnmir.sh instead.
# - svnsync sync file://$PWD/freebsd-base.svn
# - svnsync sync file://$PWD/freebsd-doc.svn
# - svnsync sync file://$PWD/freebsd-ports.svn
# this will take several days, possibly weeks.
# !!! ACHTUNG !!!
#
# 2. svn2git conversion: need to run against local paths, using rules files in ~git/*.rules
# - First svn2git run will create the target git repo, then
# - git config push.default matching
# - git config core.autocrlf false
# - git config core.ignorecase false
# - git remote add github base.github.com:freebsd/freebsd.git
# - git config --add remote.github.push '+refs/heads/master:refs/heads/master'
# - git config --add remote.github.push '+refs/heads/stable/*:refs/heads/stable/*'
# - git config --add remote.github.push '+refs/heads/projects/*:refs/heads/projects/*'
# - git config --add remote.github.push '+refs/notes/*:refs/notes/*'
# - etc.
# - touch freebsd-base.git/git-daemon-export-ok
# - svn2git/svn-all-fast-export --rules freebsd-base.rules --add-metadata-notes --identity-domain FreeBSD.org /home/svn/freebsd-base.svn
# - git push github
# done. Analog steps needed for doc and ports.
#
# 3. git-svn conversion: we use separate working dirs, but push to the same destination repo.
# - git svn init -Thead --rewrite-root=svn+ssh://svn.freebsd.org/base file:///home/svn/freebsd-base.svn base-head.git
# - git svn init -Thead --rewrite-root=svn+ssh://svn.freebsd.org/doc file:///home/svn/freebsd-doc.svn doc-head.git
# - git svn init -Thead --rewrite-root=svn+ssh://svn.freebsd.org/ports file:///home/svn/freebsd-ports.svn ports-head.git
# - cd base-head.git
# - git svn fetch -r 0:1000
# - git config push.default matching
# - git config core.autocrlf false
# - git config core.ignorecase false
# - git remote add github base.github.com:freebsd/freebsd.git
# - git config --add remote.github.push '+refs/remotes/trunk:refs/heads/svn_head'
# - git svn rebase
# - git push github
#
# 4. For using different SSH keys with github, you need to fuzz your .ssh/config like so:
#
# Host base.github.com
#   User git
#   Hostname github.com
#   IdentityFile ~/.ssh/github_base
#
# And similar for ports and doc.

# Some paths; these are historically grown; don't read too much sense into them.
: ${BASE=${PWD}}
: ${RULES_DIR=${BASE}}
: ${SVN2GIT=${BASE}/svn2git/svn-all-fast-export}  # Needs to have the merge-hack

: ${REPO_base=${BASE}/base}
: ${REPO_doc=${BASE}/doc}
: ${REPO_ports=${BASE}/ports}

ulimit -S -c 0
ulimit -H -c 0

usage()
{
    echo "usage: `basename $0` [-fgps] [-m 123] {base | doc | ports} " >&2
    echo "  -f: run just the fixup step"
    echo "  -g: run git-svn conversion"
    echo "  -m arg: max revisions to conver to"
    echo "  -p: push to upstream, don't use this"
    echo "  -s: run svn2git conversion, this is the default"
}

do_fixup=
do_svn2git=1
do_gitsvn=
do_push=
debug_rules=
max_rev=
resume_from=

while getopts "dfgm:pr:s" OPT; do
    case "$OPT" in
	d)
	    debug_rules=--debug-rules
	    ;;
	f)
	    do_fixup=1
	    ;;
	g)
	    do_gitsvn=1
	    ;;
	m)
	    max_rev="--max-rev $OPTARG"
	    ;;
	p)
	    do_push=1
	    ;;
	r)
	    resume_from="--resume-from $OPTARG"
	    ;;
	s)
	    do_svn2git=1
	    ;;
    esac
done
shift $(($OPTIND - 1))

case "$1" in
    base)
	;;
    ports)
	;;
    doc)
	;;
    *)
	usage
	echo "Repo missing or unknown: $1" >&2
	exit 1
	;;
esac

TYPE=$1

LOCK="/tmp/gitconv_${TYPE}.lock"
trap 'rm -f "${LOCK}" ; exit 1' 1 2 3 15
if ! shlock -p $$ -f "${LOCK}"; then
    echo >&2
    echo "Locked by ${TYPE} (`cat "${LOCK}"`), running too long? Please fix ..." >&2
    exit 1
fi

fixup_repo()
{
    local from to
    from=$1; shift
    to=$1; shift

    cd $BASE
    #git --bare clone $from $to
    #cd $to
    #git config --add remote.origin.fetch '+refs/notes/*:refs/notes/*'
    #git fetch -v
    #git for-each-ref --format='%(refname:short)' refs/heads/user/|xargs git branch -D
    #git filter-repo --prune-empty=always --prune-degenerate=always
    case "$TYPE" in
	base)
	    ./tag_archived_src.sh base $BASE/$from
	    ;;
	doc)
	    ;;
	ports)
	    ;;
    esac
}

svn2git()
{
    local rules source target dest d
    rules=$1; shift
    source=$1; shift
    dest="$@"

    # FIXME: error prone, yuck
    target=${rules%.rules}.git
    target=`basename $target`

    test -d "$BASE" || { echo "$BASE is not a directory, exiting ..." >&2; exit 1; }
    test -f "$rules" || { echo "$rules do not exist, exiting ..." >&2; exit 1; }

    first_run=false
    cd $BASE
    if ! test -f "$BASE/$target/HEAD"; then
	first_run=true
	echo "$BASE/$target is not a git repo, creating first revisions ..."

	git init --bare $target
	(
	    cd $target
	    touch marks-$target
	    touch git-daemon-export-ok
	    git config --local push.default matching
	    git config --local core.autocrlf false
	    git config --local core.ignorecase false
	    git config --local diff.renameLimit -1
	    # Note that user, projects, cvs2svn, vendor, vendor-sys are not
	    # being pushed to refs/heads/<foo> on the remote. That means they
	    # are essentially "hidden" when doing a regular git clone. An extra
	    # command and fetch is required to pull them down. We think this is
	    # best for most users and developers for contrib software will need
	    # to take 1 or 2 extra steps.
	    case "$TYPE" in
		base)
		    git remote add freebsd ssh://git@githome.nyi.freebsd.org/src
		    git config --add remote.freebsd.push '+refs/heads/master:refs/heads/master'
		    git config --add remote.freebsd.push '+refs/heads/stable/*:refs/heads/stable/*'
		    git config --add remote.freebsd.push '+refs/heads/releng/*:refs/heads/releng/*'
		    git config --add remote.freebsd.push '+refs/tags/release/*:refs/tags/release/*'
		    git config --add remote.freebsd.push '+refs/notes/*:refs/notes/*'

		    git config --add remote.freebsd.push '+refs/backups/*:refs/backups/*'
		    git config --add remote.freebsd.push '+refs/tags/backups/*:refs/backups/*'
		    git config --add remote.freebsd.push '+refs/heads/cvs2svn/*:refs/cvs2svn/*'
		    git config --add remote.freebsd.push '+refs/tags/cvs2svn/*:refs/cvs2svn/*'
		    git config --add remote.freebsd.push '+refs/heads/projects/*:refs/projects/*'
		    git config --add remote.freebsd.push '+refs/tags/projects/*:refs/projects/*'
		    git config --add remote.freebsd.push '+refs/heads/user/*:refs/user/*'
		    git config --add remote.freebsd.push '+refs/tags/user/*:refs/user/*'
		    git config --add remote.freebsd.push '+refs/heads/vendor-sys/*:refs/vendor-sys/*'
		    git config --add remote.freebsd.push '+refs/tags/vendor-sys/*:refs/vendor-sys/*'
		    git config --add remote.freebsd.push '+refs/heads/vendor/*:refs/vendor/*'
		    git config --add remote.freebsd.push '+refs/tags/vendor/*:refs/vendor/*'
		    ;;
		doc)
		    git remote add freebsd ssh://git@githome.nyi.freebsd.org/doc
		    git config --add remote.freebsd.push '+refs/heads/master:refs/heads/master'
		    git config --add remote.freebsd.push '+refs/tags/*:refs/tags/*'
		    git config --add remote.freebsd.push '+refs/notes/*:refs/notes/*'

		    git config --add remote.freebsd.push '+refs/heads/projects/*:refs/projects/*'
		    git config --add remote.freebsd.push '+refs/heads/user/*:refs/user/*'
		    ;;
		ports)
		    git remote add freebsd ssh://git@githome.nyi.freebsd.org/ports
		    git config --add remote.freebsd.push '+refs/heads/master:refs/heads/master'
		    git config --add remote.freebsd.push '+refs/heads/branches/*:refs/heads/branches/*'
		    git config --add remote.freebsd.push '+refs/tags/*:refs/tags/*'
		    git config --add remote.freebsd.push '+refs/notes/*:refs/notes/*'

		    git config --add remote.freebsd.push '+refs/heads/releng/*:refs/releng/*'
		    git config --add remote.freebsd.push '+refs/heads/projects/*:refs/projects/*'
		    ;;
	    esac
	)
    fi

    echo "Converting $source to $target using svn2git"
    CPUPROFILE=$BASE/prof.out $SVN2GIT $debug_rules $max_rev $resume_from --fast-import-timeout 3600 --add-metadata-notes --identity-map authors.txt --rules $rules $source
    if [ $? != 0 ]; then
	echo "Error in svn2git conversion of $source" >&2
	exit 1
    fi

    if $first_run; then
	(
	    cd $target
	    echo "Compacting, showing before and after numbers:"
	    # Takes much longer, but compresses better:
	    #du -sh .; git gc --aggressive --prune=now --force; du -sh .
	    du -sh .; git repack -adf; du -sh .
	    git log --reverse --date=short --pretty="format:%ai %an %d %T %N%B" > ../$TYPE-gitlog
	)
    fi

    if [ -z "$dest" -o -z "$do_push" ]; then
	return
    fi

    echo "Pushing $target to $dest"
    for d in $dest; do
	{ cd $target && git push -v --prune -f $d; } || { echo "Error in pushing to $dest" >&2; exit 1; }
    done
}

gitsvn()
{
    local target dest d
    target=$1; shift
    dest="$@"

    cd $BASE
    if ! test -d "$BASE/$target/.git"; then
	echo "$BASE/$target is not a git repo, creating first revisions ..."
	git svn init -Thead --rewrite-root=svn+ssh://svn.freebsd.org/$TYPE file://`eval echo \\\${REPO_${TYPE}}` $BASE/$target
	cd $BASE/$target
	git config --local push.default matching
	git config --local core.autocrlf false
	git config --local core.ignorecase false
	case "$TYPE" in
	    base) git remote add github $TYPE.github.com:freebsd/freebsd.git ;;
	    *) git remote add github $TYPE.github.com:freebsd/freebsd-$TYPE.git ;;
	esac
	git config --add remote.github.push '+refs/remotes/trunk:refs/heads/svn_head'

	# Initial small run
	git svn fetch -r 0:100
    fi
    cd $BASE/$target
    echo "Converting $target using git-svn"
    git svn rebase
    if [ $? != 0 ]; then
	echo "Error in git-svn conversion of $target" >&2
	exit 1
    fi

    if [ -z "$dest" -o -z "$do_push" ]; then
	return
    fi

    echo "Pushing $target to $dest"
    for d in $dest; do
	git push $d || { echo "Error in pushing to $dest" >&2; exit 1; }
    done
}

if [ -n "$do_fixup" ]; then
    case "$TYPE" in
	base)  fixup_repo freebsd-base.git  src.git ;;
	doc)   fixup_repo freebsd-doc.git   doc.git ;;
	ports) fixup_repo freebsd-ports.git ports.git ;;
    esac
    exit $?
fi

if [ -n "$do_gitsvn" ]; then
    case "$TYPE" in
	base) gitsvn base-head.git github ;;
	doc) gitsvn doc-head.git github ;;
	ports) gitsvn ports-head.git github ;;
    esac
fi

if [ -n "$do_svn2git" ]; then
    case "$TYPE" in
	base) svn2git $RULES_DIR/freebsd-base.rules ${REPO_base} freebsd ;;
	doc) svn2git $RULES_DIR/freebsd-doc.rules ${REPO_doc} freebsd ;;
	ports) svn2git $RULES_DIR/freebsd-ports.rules ${REPO_ports} freebsd ;;
    esac
fi
